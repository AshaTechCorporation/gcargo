import 'dart:developer';
import 'package:get/get.dart';
import 'package:gcargo/services/homeService.dart';
import 'package:hive/hive.dart';

class ProductDetailController extends GetxController {
  // Observable variables
  var isLoading = false.obs;
  var productDetail = <String, dynamic>{}.obs;
  var errorMessage = ''.obs;
  var hasError = false.obs;
  var numIid = ''.obs;
  var type = ''.obs;
  var isFavorite = false.obs; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà

  @override
  void onInit() {
    super.onInit();
    log('üöÄ ProductDetailController onInit called');
  }

  Future<void> getItemDetail(String itemId, String type) async {
    if (itemId.isEmpty) return;

    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';
      numIid.value = itemId;
      this.type.value = type;

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏à‡∏£‡∏¥‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ service ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ
      final data = await HomeService.getItemDetail(
        num_id: itemId,
        type: type, // ‡∏´‡∏£‡∏∑‡∏≠ type ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      );

      if (data != null && data is Map<String, dynamic>) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö API search ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
        final formattedData = {
          "item": {
            "items": {
              "page": "1",
              "real_total_results": "1",
              "total_results": "1",
              "page_size": 1,
              "pagecount": "1",
              "_ddf": "alex",
              "item": [data], // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
              "item_weight_update": 0,
            },
            "post_url": "",
          },
        };

        productDetail.value = formattedData;

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        await checkIfFavorite();

        // Debug: Log desc_img and props_list data
        log('üñºÔ∏è desc_img data: ${data['desc_img']}');
        log('üìã props_list data: ${data['props_list']}');
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
      }
    } catch (e) {
      log('Error in getItemDetail: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
    } finally {
      isLoading.value = false;
    }
  }

  bool _isValidResponseStructure(dynamic responseBody) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ structure ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (responseBody is! Map<String, dynamic>) return false;

      final item = responseBody['item'];
      if (item is! Map<String, dynamic>) return false;

      final items = item['items'];
      if (items is! Map<String, dynamic>) return false;

      final itemList = items['item'];
      if (itemList is! List) return false;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ item ‡πÅ‡∏£‡∏Å‡∏°‡∏µ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (itemList.isNotEmpty) {
        final firstItem = itemList[0];
        if (firstItem is! Map<String, dynamic>) return false;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields
        final requiredFields = ['title', 'pic_url', 'price', 'num_iid'];
        for (String field in requiredFields) {
          if (!firstItem.containsKey(field)) return false;
        }
      }

      return true;
    } catch (e) {
      return false;
    }
  }

  void _setError(String message) {
    hasError.value = true;
    errorMessage.value = message;
    productDetail.clear();
  }

  // Helper methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å productDetail
  Map<String, dynamic>? get itemData {
    if (productDetail.isEmpty) return null;
    final items = productDetail['item']?['items']?['item'];
    if (items is List && items.isNotEmpty) {
      return items[0];
    }
    return null;
  }

  String get title => itemData?['title'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
  String get picUrl => itemData?['pic_url'] ?? '';
  double get price => _safeToDouble(itemData?['price']);
  double get promotionPrice => _safeToDouble(itemData?['promotion_price']);
  double get originalPrice => _safeToDouble(itemData?['orginal_price']);

  double _safeToDouble(dynamic value) {
    if (value is double) return value;
    if (value is int) return value.toDouble();
    if (value is String) return double.tryParse(value) ?? 0.0;
    return 0.0;
  }

  String get area => itemData?['area'] ?? '';
  String get detailUrl => itemData?['detail_url'] ?? '';
  String get nick => itemData?['nick'] ?? '';
  String get brand => itemData?['brand'] ?? '';
  String get numIidValue => itemData?['num_iid']?.toString() ?? '';

  // Get desc_img as a list of image URLs
  List<String> get descImages {
    final descImg = itemData?['desc_img'];
    if (descImg is String && descImg.isNotEmpty) {
      // If desc_img is a string with multiple URLs separated by commas or semicolons
      return descImg.split(RegExp(r'[,;]')).map((url) => url.trim()).where((url) => url.isNotEmpty).toList();
    } else if (descImg is List) {
      // If desc_img is already a list
      return descImg.map((url) => url.toString().trim()).where((url) => url.isNotEmpty).toList();
    }
    return [];
  }

  // Get all available images (main pic_url + desc_img)
  List<String> get allImages {
    List<String> images = [];

    // Add main product image first
    if (picUrl.isNotEmpty) {
      images.add(picUrl);
    }

    // Add description images
    images.addAll(descImages);

    return images;
  }

  // Get props_list data
  Map<String, dynamic> get propsList {
    final props = itemData?['props_list'];
    if (props is Map<String, dynamic>) {
      return props;
    }
    return {};
  }

  // Get sizes from props_list
  List<String> get availableSizes {
    List<String> sizes = [];

    propsList.forEach((key, value) {
      if (value is String) {
        // Check if this property is related to size (Â∞∫Á†Å)
        if (value.contains('Â∞∫Á†Å:')) {
          final sizeName = value.split(':').last.trim();
          if (sizeName.isNotEmpty && !sizes.contains(sizeName)) {
            sizes.add(sizeName);
          }
        }
      }
    });

    return sizes;
  }

  // Get colors from props_list
  List<String> get availableColors {
    List<String> colors = [];

    propsList.forEach((key, value) {
      if (value is String) {
        // Check if this property is related to color (È¢úËâ≤)
        if (value.contains('È¢úËâ≤:')) {
          final colorName = value.split(':').last.trim();
          if (colorName.isNotEmpty && !colors.contains(colorName)) {
            colors.add(colorName);
          }
        }
      }
    });

    return colors;
  }

  // Helper method to translate complex color descriptions
  String _translateComplexColorDescription(String text) {
    // Handle complex patterns like "ÁªøËâ≤Ë°¨Ë°´+ÈªëËâ≤Áü≠Ë£§„Äê‰∏§‰ª∂Â•ó„Äë"
    String result = text;

    // Replace common Chinese terms
    final complexTranslations = {
      'Ë°¨Ë°´': '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï',
      'Áü≠Ë£§': '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ç‡∏≤‡∏™‡∏±‡πâ‡∏ô',
      'ÈïøË£§': '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ç‡∏≤‡∏¢‡∏≤‡∏ß',
      '‰∏§‰ª∂Â•ó': '‡∏ä‡∏∏‡∏î 2 ‡∏ä‡∏¥‡πâ‡∏ô',
      '‰∏â‰ª∂Â•ó': '‡∏ä‡∏∏‡∏î 3 ‡∏ä‡∏¥‡πâ‡∏ô',
      'Â•óË£Ö': '‡∏ä‡∏∏‡∏î‡πÄ‡∏ã‡πá‡∏ï',
      '„Äê': ' (',
      '„Äë': ')',
      '+': ' + ',
    };

    complexTranslations.forEach((chinese, thai) {
      result = result.replaceAll(chinese, thai);
    });

    return result;
  }

  // Translate Chinese/English to Thai
  String translateToThai(String text) {
    // Handle complex color descriptions first
    String translatedText = _translateComplexColorDescription(text);

    final translations = {
      // Sizes
      'XS': 'XS',
      'S': 'S',
      'M': 'M',
      'L': 'L',
      'XL': 'XL',
      '2XL': '2XL',
      '3XL': '3XL',
      '4XL': '4XL',
      '5XL': '5XL',
      'XXL': 'XXL',
      'XXXL': 'XXXL',
      'ÂùáÁ†Å': '‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
      'Âùá': '‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
      'Free Size': '‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
      'One Size': '‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',

      // Colors
      'black': '‡∏î‡∏≥',
      'white': '‡∏Ç‡∏≤‡∏ß',
      'red': '‡πÅ‡∏î‡∏á',
      'blue': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô',
      'green': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß',
      'yellow': '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á',
      'pink': '‡∏ä‡∏°‡∏û‡∏π',
      'purple': '‡∏°‡πà‡∏ß‡∏á',
      'orange': '‡∏™‡πâ‡∏°',
      'brown': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
      'gray': '‡πÄ‡∏ó‡∏≤',
      'grey': '‡πÄ‡∏ó‡∏≤',

      // Chinese colors
      'ÈªëËâ≤': '‡∏î‡∏≥',
      'ÁôΩËâ≤': '‡∏Ç‡∏≤‡∏ß',
      'Á∫¢Ëâ≤': '‡πÅ‡∏î‡∏á',
      'ËìùËâ≤': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô',
      'ÁªøËâ≤': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß',
      'ÈªÑËâ≤': '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á',
      'Á≤âËâ≤': '‡∏ä‡∏°‡∏û‡∏π',
      'Á¥´Ëâ≤': '‡∏°‡πà‡∏ß‡∏á',
      'Ê©ôËâ≤': '‡∏™‡πâ‡∏°',
      'Ê£ïËâ≤': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
      'ÁÅ∞Ëâ≤': '‡πÄ‡∏ó‡∏≤',
      'Èªë': '‡∏î‡∏≥',
      'ÁôΩ': '‡∏Ç‡∏≤‡∏ß',
      'Á∫¢': '‡πÅ‡∏î‡∏á',
      'Ëìù': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô',
      'Áªø': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß',
      'ÈªÑ': '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á',
      'Á≤â': '‡∏ä‡∏°‡∏û‡∏π',
      'Á¥´': '‡∏°‡πà‡∏ß‡∏á',
      'Ê©ô': '‡∏™‡πâ‡∏°',
      'Ê£ï': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
      'ÁÅ∞': '‡πÄ‡∏ó‡∏≤',
      'ÈáëËâ≤': '‡∏ó‡∏≠‡∏á',
      'Èì∂Ëâ≤': '‡πÄ‡∏á‡∏¥‡∏ô',
      'ÂíñÂï°Ëâ≤': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏°',
      'ÂíñÂï°': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
      'Á±≥Ëâ≤': '‡∏Ñ‡∏£‡∏µ‡∏°',
      'Âç°ÂÖ∂Ëâ≤': '‡∏Å‡∏≤‡∏Å‡∏µ',
      'Ê∑±Ëìù': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°',
      'ÊµÖËìù': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô',
      'Ê∑±ÁÅ∞': '‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°',
      'ÊµÖÁÅ∞': '‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô',
      'Áé´Áë∞Á∫¢': '‡πÅ‡∏î‡∏á‡∏Å‡∏∏‡∏´‡∏•‡∏≤‡∏ö',
      'Â§©Ëìù': '‡∏ü‡πâ‡∏≤',
      'ËçâÁªø': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô',
      'Ê∑±Áªø': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°',
    };

    // Apply simple translations to the complex translated text
    String finalResult = translatedText;
    translations.forEach((original, translated) {
      finalResult = finalResult.replaceAll(original, translated);
    });

    return finalResult;
  }

  // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Future<void> refreshData() async {
    if (numIid.value.isNotEmpty) {
      await getItemDetail(numIid.value, type.value);
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
  Future<void> checkIfFavorite() async {
    try {
      final box = await Hive.openBox('favorites');
      final favoriteKey = '${numIid.value}_favorite';
      isFavorite.value = box.containsKey(favoriteKey);
    } catch (e) {
      log('Error checking favorite: $e');
    }
  }

  Future<void> toggleFavorite() async {
    try {
      final box = await Hive.openBox('favorites');
      final favoriteKey = '${numIid.value}_favorite';

      if (isFavorite.value) {
        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
        await box.delete(favoriteKey);
        isFavorite.value = false;
        log('Removed from favorites: $favoriteKey');
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
        final favoriteItem = {
          'num_iid': numIidValue,
          'title': title,
          'price': price,
          'orginal_price': originalPrice,
          'nick': nick,
          'detail_url': detailUrl,
          'pic_url': picUrl,
          'brand': brand,
          'quantity': 1, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          'selectedSize': '', // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          'selectedColor': '', // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          'name': title, // ‡πÉ‡∏ä‡πâ title ‡πÄ‡∏õ‡πá‡∏ô name
          'added_at': DateTime.now().toIso8601String(),
        };

        await box.put(favoriteKey, favoriteItem);
        isFavorite.value = true;
        log('Added to favorites: $favoriteKey');
      }
    } catch (e) {
      log('Error toggling favorite: $e');
    }
  }
}
