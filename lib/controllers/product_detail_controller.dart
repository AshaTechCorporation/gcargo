import 'dart:developer';
import 'package:get/get.dart';
import 'package:gcargo/services/homeService.dart';
import 'package:hive/hive.dart';

class ProductDetailController extends GetxController {
  // Observable variables
  var isLoading = false.obs;
  var productDetail = <String, dynamic>{}.obs;
  var errorMessage = ''.obs;
  var hasError = false.obs;
  var numIid = ''.obs;
  var type = ''.obs;
  var isFavorite = false.obs; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  var selectedOptionKey = ''.obs; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö option key ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ‡πÄ‡∏ä‡πà‡∏ô "0:0"

  @override
  void onInit() {
    super.onInit();
    log('üöÄ ProductDetailController onInit called');
  }

  Future<void> getItemDetail(String itemId, String type) async {
    if (itemId.isEmpty) return;

    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';
      numIid.value = itemId;
      this.type.value = type;

      // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏à‡∏£‡∏¥‡∏á‡πÇ‡∏î‡∏¢‡πÉ‡∏ä‡πâ service ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ô‡πÑ‡∏ß‡πâ
      final data = await HomeService.getItemDetail(
        num_id: itemId,
        type: type, // ‡∏´‡∏£‡∏∑‡∏≠ type ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£
      );

      if (data != null && data is Map<String, dynamic>) {
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏Å‡∏±‡∏ö API search ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á
        final formattedData = {
          "item": {
            "items": {
              "page": "1",
              "real_total_results": "1",
              "total_results": "1",
              "page_size": 1,
              "pagecount": "1",
              "_ddf": "alex",
              "item": [data], // ‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏à‡∏≤‡∏Å API
              "item_weight_update": 0,
            },
            "post_url": "",
          },
        };

        productDetail.value = formattedData;

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        await checkIfFavorite();

        // Debug: Log all available fields
        log('üîç All product data fields: ${data.keys.toList()}');
        log('üñºÔ∏è desc_img data: ${data['desc_img']}');
        log('üìã props_list data: ${data['props_list']}');
        log('üìù description data: ${data['description']}');
        log('üìÑ detail data: ${data['detail']}');
        log('üìÑ content data: ${data['content']}');
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
      }
    } catch (e) {
      log('Error in getItemDetail: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
    } finally {
      isLoading.value = false;
    }
  }

  String extractTitlesToTranslate(List<Map<String, dynamic>> items, {String separator = '|||'}) {
    return items.map((item) => item['title'] ?? '').join(separator);
  }

  List<Map<String, dynamic>> applyTranslatedTitlesToItems(
    List<Map<String, dynamic>> originalItems,
    String translatedText, {
    String separator = '|||',
  }) {
    final translatedTitles = translatedText.split(separator);

    return List.generate(originalItems.length, (i) {
      final newItem = Map<String, dynamic>.from(originalItems[i]);
      if (i < translatedTitles.length) {
        newItem['title'] = translatedTitles[i].trim();
      }
      return newItem;
    });
  }

  String extractTitlesToTranslatePops(List<Map<String, dynamic>> items, {String separator = '|||'}) {
    return items.map((item) => '${item['name'] ?? ''}:${item['value'] ?? ''}').join(separator);
  }

  List<Map<String, dynamic>> applyTranslatedTitlesToItemsPops(
    List<Map<String, dynamic>> originalItems,
    String translatedText, {
    String separator = '|||',
  }) {
    final translatedTitles = translatedText.split(separator);

    return List.generate(originalItems.length, (i) {
      final newItem = Map<String, dynamic>.from(originalItems[i]);
      if (i < translatedTitles.length) {
        final data = translatedTitles[i].split(': ');
        if (data.length >= 2) {
          newItem['name'] = data[0].trim();
          newItem['value'] = data[1].trim();
        } else if (data.length == 1) {
          newItem['name'] = data[0].trim();
          newItem['value'] = originalItems[i]['value'] ?? '';
        }
      }
      return newItem;
    });
  }

  bool _isValidResponseStructure(dynamic responseBody) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ structure ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (responseBody is! Map<String, dynamic>) return false;

      final item = responseBody['item'];
      if (item is! Map<String, dynamic>) return false;

      final items = item['items'];
      if (items is! Map<String, dynamic>) return false;

      final itemList = items['item'];
      if (itemList is! List) return false;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ item ‡πÅ‡∏£‡∏Å‡∏°‡∏µ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (itemList.isNotEmpty) {
        final firstItem = itemList[0];
        if (firstItem is! Map<String, dynamic>) return false;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields
        final requiredFields = ['title', 'pic_url', 'price', 'num_iid'];
        for (String field in requiredFields) {
          if (!firstItem.containsKey(field)) return false;
        }
      }

      return true;
    } catch (e) {
      return false;
    }
  }

  void _setError(String message) {
    hasError.value = true;
    errorMessage.value = message;
    productDetail.clear();
  }

  // Helper methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å productDetail
  Map<String, dynamic>? get itemData {
    if (productDetail.isEmpty) return null;
    final items = productDetail['item']?['items']?['item'];
    if (items is List && items.isNotEmpty) {
      return items[0];
    }
    return null;
  }

  String get title => itemData?['title'] ?? '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∑‡πà‡∏≠‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤';
  String get picUrl => itemData?['pic_url'] ?? '';
  double get price => _safeToDouble(itemData?['price']);
  double get promotionPrice => _safeToDouble(itemData?['promotion_price']);
  double get originalPrice => _safeToDouble(itemData?['orginal_price']);

  double _safeToDouble(dynamic value) {
    if (value is double) return value;
    if (value is int) return value.toDouble();
    if (value is String) return double.tryParse(value) ?? 0.0;
    return 0.0;
  }

  String get area => itemData?['area'] ?? '';
  String get detailUrl => itemData?['detail_url'] ?? '';
  String get nick => itemData?['nick'] ?? '';
  String get brand => itemData?['brand'] ?? '';
  String get numIidValue => itemData?['num_iid']?.toString() ?? '';

  // Get desc_img as a list of image URLs
  List<String> get descImages {
    final descImg = itemData?['desc_img'];
    if (descImg is String && descImg.isNotEmpty) {
      // If desc_img is a string with multiple URLs separated by commas or semicolons
      return descImg.split(RegExp(r'[,;]')).map((url) => url.trim()).where((url) => url.isNotEmpty).toList();
    } else if (descImg is List) {
      // If desc_img is already a list
      return descImg.map((url) => url.toString().trim()).where((url) => url.isNotEmpty).toList();
    }
    return [];
  }

  // Get prop_imgs data
  Map<String, dynamic> get propImgs {
    final propImgs = itemData?['prop_imgs'];
    if (propImgs is Map<String, dynamic>) {
      return propImgs;
    }
    return {};
  }

  // Get prop_img list
  List<Map<String, dynamic>> get propImgList {
    final propImg = propImgs['prop_img'];
    if (propImg is List) {
      return propImg.cast<Map<String, dynamic>>();
    }
    return [];
  }

  // Get image URL for specific option key
  String getImageForOption(String optionKey) {
    for (var propImg in propImgList) {
      if (propImg['properties'] == optionKey) {
        return propImg['url'] ?? '';
      }
    }
    return '';
  }

  // Get all available images (prop_imgs only, fallback to main pic_url)
  List<String> get allImages {
    // Force reactive by accessing selectedOptionKey.value
    final currentSelection = selectedOptionKey.value;
    List<String> images = [];

    // Always show all prop_img images in original order
    if (propImgList.isNotEmpty) {
      for (var propImg in propImgList) {
        final url = propImg['url'];
        if (url != null && url.isNotEmpty && !images.contains(url)) {
          images.add(url);
        }
      }
      return images;
    }

    // Fallback: if no prop_imgs, show only main product image
    if (picUrl.isNotEmpty) {
      images.add(picUrl);
    }

    return images;
  }

  // Method to update selected option and trigger image change
  void updateSelectedOption(String optionKey) {
    selectedOptionKey.value = optionKey;
  }

  // Get current selected image URL (for cart/order)
  String get currentSelectedImageUrl {
    // If option is selected, use option image
    if (selectedOptionKey.value.isNotEmpty) {
      final optionImage = getImageForOption(selectedOptionKey.value);
      if (optionImage.isNotEmpty) {
        return optionImage;
      }
    }
    // If no option selected, use main pic_url
    return picUrl;
  }

  // Create mapping between translated colors and their keys
  Map<String, String> get colorToKeyMapping {
    Map<String, String> mapping = {};
    propsList.forEach((key, value) {
      if (value.toString().contains('È¢úËâ≤:')) {
        final originalColor = value.toString().split(':')[1]; // ‡πÄ‡∏ä‡πà‡∏ô "ÁôΩËâ≤ÈïøÊ¨æ"
        final translatedColor = translateToThai(originalColor); // ‡πÄ‡∏ä‡πà‡∏ô "‡∏Ç‡∏≤‡∏ßÈïøÊ¨æ"
        mapping[translatedColor] = key; // "‡∏Ç‡∏≤‡∏ßÈïøÊ¨æ" -> "0:0"
      }
    });
    return mapping;
  }

  // Create mapping between translated sizes and their keys
  Map<String, String> get sizeToKeyMapping {
    Map<String, String> mapping = {};
    propsList.forEach((key, value) {
      if (value.toString().contains('Â∞∫Á†Å:')) {
        final originalSize = value.toString().split(':')[1]; // ‡πÄ‡∏ä‡πà‡∏ô "XS"
        final translatedSize = translateToThai(originalSize); // ‡πÄ‡∏ä‡πà‡∏ô "XS"
        mapping[translatedSize] = key; // "XS" -> "1:0"
      }
    });
    return mapping;
  }

  // Get props_list data
  Map<String, dynamic> get propsList {
    final props = itemData?['props_list'];
    if (props is Map<String, dynamic>) {
      return props;
    }
    return {};
  }

  // ------------------------- FLEX PARSER (‡πÑ‡∏°‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏•‡∏≤‡∏™) -------------------------

  /// ‡πÅ‡∏¢‡∏Å props_list ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏≤‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢‡∏Ç‡∏≠‡∏á key (‡πÄ‡∏ä‡πà‡∏ô "0", "1")
  /// ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô Map<categoryId, List<Map<String,String>>> ‡πÇ‡∏î‡∏¢‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏Å‡πá‡∏ö {'key','value','raw'}
  Map<String, List<Map<String, String>>> get _optionsByCategory {
    final Map<String, List<Map<String, String>>> bucket = {};

    propsList.forEach((k, v) {
      if (v is! String || !k.contains(':')) return;
      final kp = k.split(':');
      if (kp.length != 2) return;
      final catId = kp[0].trim(); // "0", "1", ...
      // value ‡πÄ‡∏ä‡πà‡∏ô "È¢úËâ≤:S23Â§ñÁΩÆÁ¨îÈªëËâ≤„Äê16+1T„Äë" -> ‡πÄ‡∏Å‡πá‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏õ‡πá‡∏ô value
      final vp = v.split(':');
      final cleaned = (vp.length >= 2 ? vp.sublist(1).join(':') : v).trim();

      final item = {'key': k, 'value': cleaned, 'raw': v};
      final list = bucket[catId] ?? <Map<String, String>>[];
      // ‡∏Å‡∏±‡∏ô‡∏ã‡πâ‡∏≥‡∏î‡πâ‡∏ß‡∏¢ value
      final exists = list.any((e) => e['value'] == cleaned);
      if (!exists) list.add(item);
      bucket[catId] = list;
    });

    // sort catId ‡∏ï‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ñ‡πâ‡∏≤‡∏ó‡∏≥‡πÑ‡∏î‡πâ
    final sortedKeys =
        bucket.keys.toList()..sort((a, b) {
          final ai = int.tryParse(a);
          final bi = int.tryParse(b);
          if (ai == null || bi == null) return a.compareTo(b);
          return ai.compareTo(bi);
        });

    final Map<String, List<Map<String, String>>> out = {};
    for (final k in sortedKeys) {
      out[k] = bucket[k]!;
    }
    return out;
  }

  /// ‡πÄ‡∏î‡∏≤‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏†‡∏≤‡∏¢‡πÉ‡∏ô (‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô ‡πÑ‡∏°‡πà‡∏ü‡∏¥‡∏Å)
  String _inferCategoryLabel(String categoryId, List<Map<String, String>> items) {
    final combined =
        (items.map((e) => e['raw']).whereType<String>().join(' | ') + ' ' + items.map((e) => e['value']).whereType<String>().join(' | '))
            .toLowerCase();

    bool _hasAny(List<String> hints) => hints.any((h) => combined.contains(h.toLowerCase()));

    // hints
    const colorHints = [
      'È¢úËâ≤',
      'È°èËâ≤',
      'color',
      '‡∏™‡∏µ',
      'black',
      'white',
      'red',
      'blue',
      'green',
      'yellow',
      'pink',
      'purple',
      'orange',
      'brown',
      'gray',
      'grey',
      'ÈáëËâ≤',
      'Èì∂Ëâ≤',
      'ÂíñÂï°',
      'Á±≥Ëâ≤',
      'Ê∑±Ëìù',
      'ÊµÖËìù',
      'Ê∑±ÁÅ∞',
      'ÊµÖÁÅ∞',
    ];
    const sizeHints = ['Â∞∫Á†Å', 'Â∞∫ÂØ∏', 'size', '‡πÑ‡∏ã‡∏™‡πå', '‡∏Ç‡∏ô‡∏≤‡∏î', 'xs', 's', 'm', 'l', 'xl', 'xxl', 'xxxl', 'ÂùáÁ†Å', 'free size', 'one size'];
    const capacityHints = ['ÂÆπÈáè', 'ÂÜÖÂ≠ò', 'Â≠òÂÇ®', 'storage', 'memory', 'ram', 'rom', 'gb', 'tb'];

    if (_hasAny(colorHints)) return '‡∏™‡∏µ';
    if (_hasAny(sizeHints)) return '‡∏Ç‡∏ô‡∏≤‡∏î/‡πÑ‡∏ã‡∏™‡πå';
    if (_hasAny(capacityHints)) return '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏/‡∏™‡πÄ‡∏õ‡∏Å';

    // fallback: ‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ + running number
    final idx = int.tryParse(categoryId);
    return '‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ${idx != null ? (idx + 1) : categoryId}';
  }

  /// ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ‡πÅ‡∏ö‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏õ‡∏•‡πÑ‡∏ó‡∏¢ (‡πÉ‡∏ä‡πâ‡πÄ‡∏£‡∏ô‡πÄ‡∏î‡∏≠‡∏£‡πå UI ‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢)
  /// ‡πÇ‡∏Ñ‡∏£‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á: [{'id': '0', 'label': '‡∏™‡∏µ', 'options': ['‡∏î‡∏≥','‡∏Ç‡∏≤‡∏ß',...]}]
  List<Map<String, dynamic>> get optionGroups {
    final List<Map<String, dynamic>> out = [];
    _optionsByCategory.forEach((catId, items) {
      out.add({'id': catId, 'label': _inferCategoryLabel(catId, items), 'options': items.map((e) => translateToThai(e['value'] ?? '')).toList()});
    });
    return out;
  }

  /// ‡∏´‡∏≤ key ‡∏à‡∏£‡∏¥‡∏á ("0:0", "1:2", ...) ‡∏à‡∏≤‡∏Å (categoryId, optionValue ‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å)
  String? getOptionKeyByCategoryAndValue(String categoryId, String optionValue) {
    final items = _optionsByCategory[categoryId];
    if (items == null) return null;
    String norm(String s) => s.trim();
    final picked = norm(optionValue);
    for (final it in items) {
      final rawVal = norm(it['value'] ?? '');
      final thVal = norm(translateToThai(it['value'] ?? ''));
      if (picked == rawVal || picked == thVal) return it['key'];
    }
    return null;
  }

  // ----------------- Helper: availableSizes / availableColors (‡πÅ‡∏ö‡∏ö‡∏¢‡∏∑‡∏î‡∏´‡∏¢‡∏∏‡πà‡∏ô) -----------------

  /// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° label == '‡∏™‡∏µ' ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏≤‡∏à‡∏≤‡∏Å catId '0'
  List<String> get availableColors {
    // ‡∏´‡∏≤ label == '‡∏™‡∏µ'
    final matchLabel = optionGroups.firstWhereOrNull((g) => g['label'] == '‡∏™‡∏µ');
    if (matchLabel != null) return List<String>.from(matchLabel['options'] ?? const []);

    // fallback: ‡∏•‡∏≠‡∏á catId '0'
    final zero = optionGroups.firstWhereOrNull((g) => g['id'] == '0');
    return zero != null ? List<String>.from(zero['options'] ?? const []) : <String>[];
  }

  /// ‡∏ñ‡πâ‡∏≤‡πÄ‡∏à‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏° label == '‡∏Ç‡∏ô‡∏≤‡∏î/‡πÑ‡∏ã‡∏™‡πå' ‡∏Å‡πá‡πÉ‡∏ä‡πâ‡πÄ‡∏•‡∏¢, ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡∏•‡∏≠‡∏á‡πÄ‡∏î‡∏≤‡∏à‡∏≤‡∏Å catId '1'
  List<String> get availableSizes {
    final matchLabel = optionGroups.firstWhereOrNull((g) => g['label'] == '‡∏Ç‡∏ô‡∏≤‡∏î/‡πÑ‡∏ã‡∏™‡πå');
    if (matchLabel != null) return List<String>.from(matchLabel['options'] ?? const []);

    final one = optionGroups.firstWhereOrNull((g) => g['id'] == '1');
    return one != null ? List<String>.from(one['options'] ?? const []) : <String>[];
  }

  // ------------------------- ‡πÅ‡∏õ‡∏•‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡∏à‡∏µ‡∏ô/‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏© -> ‡πÑ‡∏ó‡∏¢) -------------------------

  // Helper method to translate complex color descriptions
  String _translateComplexColorDescription(String text) {
    // Handle complex patterns like "ÁªøËâ≤Ë°¨Ë°´+ÈªëËâ≤Áü≠Ë£§„Äê‰∏§‰ª∂Â•ó„Äë"
    String result = text;

    // Replace common Chinese terms
    final complexTranslations = {
      'Ë°¨Ë°´': '‡πÄ‡∏™‡∏∑‡πâ‡∏≠‡πÄ‡∏ä‡∏¥‡πâ‡∏ï',
      'Áü≠Ë£§': '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ç‡∏≤‡∏™‡∏±‡πâ‡∏ô',
      'ÈïøË£§': '‡∏Å‡∏≤‡∏á‡πÄ‡∏Å‡∏á‡∏Ç‡∏≤‡∏¢‡∏≤‡∏ß',
      '‰∏§‰ª∂Â•ó': '‡∏ä‡∏∏‡∏î 2 ‡∏ä‡∏¥‡πâ‡∏ô',
      '‰∏â‰ª∂Â•ó': '‡∏ä‡∏∏‡∏î 3 ‡∏ä‡∏¥‡πâ‡∏ô',
      'Â•óË£Ö': '‡∏ä‡∏∏‡∏î‡πÄ‡∏ã‡πá‡∏ï',
      '„Äê': ' (',
      '„Äë': ')',
      '+': ' + ',
    };

    complexTranslations.forEach((chinese, thai) {
      result = result.replaceAll(chinese, thai);
    });

    return result;
  }

  // Translate Chinese/English to Thai
  String translateToThai(String text) {
    // Handle complex color descriptions first
    String translatedText = _translateComplexColorDescription(text);

    final translations = {
      // Sizes
      'XS': 'XS',
      'S': 'S',
      'M': 'M',
      'L': 'L',
      'XL': 'XL',
      '2XL': '2XL',
      '3XL': '3XL',
      '4XL': '4XL',
      '5XL': '5XL',
      'XXL': 'XXL',
      'XXXL': 'XXXL',
      'ÂùáÁ†Å': '‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
      'Âùá': '‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
      'Free Size': '‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',
      'One Size': '‡πÑ‡∏ã‡∏™‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß',

      // Colors (EN)
      'black': '‡∏î‡∏≥',
      'white': '‡∏Ç‡∏≤‡∏ß',
      'red': '‡πÅ‡∏î‡∏á',
      'blue': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô',
      'green': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß',
      'yellow': '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á',
      'pink': '‡∏ä‡∏°‡∏û‡∏π',
      'purple': '‡∏°‡πà‡∏ß‡∏á',
      'orange': '‡∏™‡πâ‡∏°',
      'brown': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
      'gray': '‡πÄ‡∏ó‡∏≤',
      'grey': '‡πÄ‡∏ó‡∏≤',

      // Chinese colors
      'ÈªëËâ≤': '‡∏î‡∏≥',
      'ÁôΩËâ≤': '‡∏Ç‡∏≤‡∏ß',
      'Á∫¢Ëâ≤': '‡πÅ‡∏î‡∏á',
      'ËìùËâ≤': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô',
      'ÁªøËâ≤': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß',
      'ÈªÑËâ≤': '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á',
      'Á≤âËâ≤': '‡∏ä‡∏°‡∏û‡∏π',
      'Á¥´Ëâ≤': '‡∏°‡πà‡∏ß‡∏á',
      'Ê©ôËâ≤': '‡∏™‡πâ‡∏°',
      'Ê£ïËâ≤': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
      'ÁÅ∞Ëâ≤': '‡πÄ‡∏ó‡∏≤',
      'Èªë': '‡∏î‡∏≥',
      'ÁôΩ': '‡∏Ç‡∏≤‡∏ß',
      'Á∫¢': '‡πÅ‡∏î‡∏á',
      'Ëìù': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô',
      'Áªø': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß',
      'ÈªÑ': '‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á',
      'Á≤â': '‡∏ä‡∏°‡∏û‡∏π',
      'Á¥´': '‡∏°‡πà‡∏ß‡∏á',
      'Ê©ô': '‡∏™‡πâ‡∏°',
      'Ê£ï': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
      'ÁÅ∞': '‡πÄ‡∏ó‡∏≤',
      'ÈáëËâ≤': '‡∏ó‡∏≠‡∏á',
      'Èì∂Ëâ≤': '‡πÄ‡∏á‡∏¥‡∏ô',
      'ÂíñÂï°Ëâ≤': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏Ç‡πâ‡∏°',
      'ÂíñÂï°': '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•',
      'Á±≥Ëâ≤': '‡∏Ñ‡∏£‡∏µ‡∏°',
      'Âç°ÂÖ∂Ëâ≤': '‡∏Å‡∏≤‡∏Å‡∏µ',
      'Ê∑±Ëìù': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡πÄ‡∏Ç‡πâ‡∏°',
      'ÊµÖËìù': '‡∏ô‡πâ‡∏≥‡πÄ‡∏á‡∏¥‡∏ô‡∏≠‡πà‡∏≠‡∏ô',
      'Ê∑±ÁÅ∞': '‡πÄ‡∏ó‡∏≤‡πÄ‡∏Ç‡πâ‡∏°',
      'ÊµÖÁÅ∞': '‡πÄ‡∏ó‡∏≤‡∏≠‡πà‡∏≠‡∏ô',
      'Áé´Áë∞Á∫¢': '‡πÅ‡∏î‡∏á‡∏Å‡∏∏‡∏´‡∏•‡∏≤‡∏ö',
      'Â§©Ëìù': '‡∏ü‡πâ‡∏≤',
      'ËçâÁªø': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏≠‡πà‡∏≠‡∏ô',
      'Ê∑±Áªø': '‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡πÄ‡∏Ç‡πâ‡∏°',
    };

    // Apply simple translations to the complex translated text
    String finalResult = translatedText;
    translations.forEach((original, translated) {
      finalResult = finalResult.replaceAll(original, translated);
    });

    return finalResult;
  }

  // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Future<void> refreshData() async {
    if (numIid.value.isNotEmpty) {
      await getItemDetail(numIid.value, type.value);
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
  Future<void> checkIfFavorite() async {
    try {
      final box = await Hive.openBox('favorites');
      final favoriteKey = '${numIid.value}_favorite';
      isFavorite.value = box.containsKey(favoriteKey);
    } catch (e) {
      log('Error checking favorite: $e');
    }
  }

  Future<void> toggleFavorite() async {
    try {
      final box = await Hive.openBox('favorites');
      final favoriteKey = '${numIid.value}_favorite';

      if (isFavorite.value) {
        // ‡∏•‡∏ö‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
        await box.delete(favoriteKey);
        isFavorite.value = false;
        log('Removed from favorites: $favoriteKey');
      } else {
        // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏î
        final favoriteItem = {
          'num_iid': numIidValue,
          'title': title,
          'price': price,
          'orginal_price': originalPrice,
          'nick': nick,
          'detail_url': detailUrl,
          'pic_url': picUrl,
          'brand': brand,
          'quantity': 1, // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          'selectedSize': '', // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          'selectedColor': '', // ‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô
          'name': title, // ‡πÉ‡∏ä‡πâ title ‡πÄ‡∏õ‡πá‡∏ô name
          'added_at': DateTime.now().toIso8601String(),
        };

        await box.put(favoriteKey, favoriteItem);
        isFavorite.value = true;
        log('Added to favorites: $favoriteKey');
      }
    } catch (e) {
      log('Error toggling favorite: $e');
    }
  }
}
