import 'dart:developer';
import 'package:flutter/scheduler.dart';
import 'package:gcargo/models/imgbanner.dart';
import 'package:gcargo/models/orders/serviceTransporterById.dart';
import 'package:gcargo/models/payment.dart';
import 'package:gcargo/models/rateExchange.dart';
import 'package:gcargo/models/rateShip.dart';
import 'package:gcargo/models/shipping.dart';
import 'package:gcargo/models/transferFee.dart';
import 'package:gcargo/models/user.dart';
import 'package:gcargo/services/homeService.dart';
import 'package:get/get.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:gcargo/constants.dart';

class HomeController extends GetxController {
  final HomeService _homeService = HomeService();

  // Observable variables
  var isLoading = false.obs;
  final RxList<Map<String, dynamic>> searchItems = <Map<String, dynamic>>[].obs;
  var errorMessage = ''.obs;
  var hasError = false.obs;
  var selectedItemType = ''.obs; // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö type ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  final RxMap<String, dynamic> exchangeRate = <String, dynamic>{}.obs;
  final RxList<ImgBanner> imgBanners = <ImgBanner>[].obs;
  List<Shipping> ship_address = [];
  Shipping? select_ship_address;
  var extraServices = <ServiceTransporterById>[].obs;
  var rateShip = <RateShip>[].obs;
  var rateExchange = Rxn<RateExchange>();
  var transferFee = Rxn<TransferFee>();
  var alipayPayment = <Payment>[].obs;
  var currentUser = Rxn<User>();
  var alipayPaymentById = Rxn<Payment>();
  var reward = <Map<String, dynamic>>[].obs;
  var rewardExchangeHistory = <Map<String, dynamic>>[].obs;
  var isLoadingRewardHistory = false.obs;

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏Å‡πá‡∏ö‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡πä‡∏•‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏Æ‡∏°
  var translatedHomeTitles = <String, String>{}.obs;
  var isTranslatingHomeTitles = false.obs;

  @override
  void onInit() {
    super.onInit();
    log('üöÄ HomeController onInit called');
    // ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡πÉ‡∏´‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á itemType
    selectedItemType.value = itemType.first;
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å build ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á setState during build error
    SchedulerBinding.instance.addPostFrameCallback((_) {
      searchItemsFromAPI('Shirt');
      getExchangeRateFromAPI();
      getImgBannerFromAPI();
      getUserDataAndShippingAddresses();
      getExtraServicesFromAPI();
      getServiceRateFromAPI();
      getServiceFeeFromAPI();
    });
  }

  Future<void> searchItemsFromAPI(String query) async {
    if (query.isEmpty) return;

    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final data = await HomeService.getItemSearch(search: query, type: selectedItemType.value == 'shopgs1' ? 'taobao' : '1688', page: 1);

      if (data != null && data is Map && data['item'] is Map && data['item']['items'] is Map && data['item']['items']['item'] is List) {
        final List<Map<String, dynamic>> items =
            (data['item']['items']['item'] as List).whereType<Map>().map((e) => Map<String, dynamic>.from(e)).toList();

        if (items.isNotEmpty) {
          searchItems.value = items;
          // ‡πÅ‡∏õ‡∏•‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡πä‡∏•‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤
          translateHomeTitles();
        } else {
          _setError('‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
        }
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
      }
    } catch (e) {
      log('‚ùå Error in searchItems: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤');
    } finally {
      isLoading.value = false;
    }
  }

  bool _isValidResponseStructure(dynamic responseBody) {
    try {
      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ structure ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (responseBody is! Map<String, dynamic>) return false;

      final item = responseBody['item'];
      if (item is! Map<String, dynamic>) return false;

      final items = item['items'];
      if (items is! Map<String, dynamic>) return false;

      final itemList = items['item'];
      if (itemList is! List) return false;

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ item ‡πÅ‡∏£‡∏Å‡∏°‡∏µ field ‡∏ó‡∏µ‡πà‡∏à‡∏≥‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (itemList.isNotEmpty) {
        final firstItem = itemList[0];
        if (firstItem is! Map<String, dynamic>) return false;

        // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö required fields
        final requiredFields = ['title', 'pic_url', 'price', 'num_iid'];
        for (String field in requiredFields) {
          if (!firstItem.containsKey(field)) return false;
        }
      }

      return true;
    } catch (e) {
      return false;
    }
  }

  void _setError(String message) {
    hasError.value = true;
    errorMessage.value = message;
    searchItems.clear();
  }

  // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Future<void> refreshData() async {
    await searchItemsFromAPI('Shirt');
  }

  // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà
  Future<void> newSearch(String query) async {
    await searchItemsFromAPI(query);
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡πä‡∏•‡∏Ç‡∏≠‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡πÇ‡∏Æ‡∏°
  Future<void> translateHomeTitles() async {
    if (searchItems.isEmpty || isTranslatingHomeTitles.value) return;

    log('üîÑ Starting home titles translation for ${searchItems.length} items');
    isTranslatingHomeTitles.value = true;

    try {
      // ‡∏£‡∏ß‡∏ö‡∏£‡∏ß‡∏°‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡πä‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      final List<String> originalTitles = [];

      for (int i = 0; i < searchItems.length; i++) {
        final originalTitle = searchItems[i]['title']?.toString() ?? '';
        if (originalTitle.isNotEmpty) {
          originalTitles.add(originalTitle);
        }
      }

      if (originalTitles.isNotEmpty) {
        final Map<String, String> titleMap = {};

        // ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà 1: ‡∏™‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
        await _translateTitlesRound(originalTitles, titleMap, 1);

        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÑ‡∏î‡πâ‡πÅ‡∏õ‡∏•‡∏Ñ‡∏£‡∏ö‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        final List<String> missingTitles = originalTitles.where((title) => !titleMap.containsKey(title)).toList();

        if (missingTitles.isNotEmpty) {
          log('üîÑ Round 2: Translating ${missingTitles.length} missing titles');
          await _translateTitlesRound(missingTitles, titleMap, 2);
        }

        translatedHomeTitles.value = titleMap;
        log('üéâ Home titles translation completed. Total translated: ${titleMap.length}/${originalTitles.length}');
      }
    } catch (e) {
      log('‚ùå Error translating home titles: $e');
    } finally {
      isTranslatingHomeTitles.value = false;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏£‡∏≠‡∏ö
  Future<void> _translateTitlesRound(List<String> titlesToTranslate, Map<String, String> titleMap, int round) async {
    try {
      // ‡∏£‡∏ß‡∏°‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡πä‡∏•‡∏î‡πâ‡∏ß‡∏¢ separator
      final String combinedText = titlesToTranslate.join('|||');
      log('üìù Round $round - Combined text to translate: ${combinedText.length} characters');

      // ‡∏™‡πà‡∏á‡πÅ‡∏õ‡∏•‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
      final String? translatedText = await HomeService.translate(text: combinedText, from: 'zh-CN', to: 'th');

      if (translatedText != null && translatedText.isNotEmpty) {
        // ‡πÅ‡∏¢‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß
        final List<String> translatedTitles = translatedText.split('|||');

        // ‡∏à‡∏±‡∏ö‡∏Ñ‡∏π‡πà‡πÑ‡∏ï‡πÄ‡∏ï‡∏¥‡πä‡∏•‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏Å‡∏±‡∏ö‡∏ó‡∏µ‡πà‡πÅ‡∏õ‡∏•‡πÅ‡∏•‡πâ‡∏ß
        for (int i = 0; i < titlesToTranslate.length && i < translatedTitles.length; i++) {
          final original = titlesToTranslate[i];
          final translated = translatedTitles[i].trim();
          if (translated.isNotEmpty) {
            titleMap[original] = translated;
            log('‚úÖ Round $round - Translated: "$original" -> "$translated"');
          }
        }
      }
    } catch (e) {
      log('‚ùå Error in translation round $round: $e');
    }
  }

  void _setErrorRate(String message) {
    hasError.value = true;
    errorMessage.value = message;
    exchangeRate.clear();
  }

  Future<void> getExchangeRateFromAPI() async {
    try {
      final rateData = await HomeService.getExchageRate();
      if (rateData != null && rateData is Map<String, dynamic>) {
        exchangeRate.value = rateData;
      } else {
        _setErrorRate('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏ó');
      }
    } catch (e) {
      log('‚ùå Error in searchItems: $e');
      _setErrorRate('$e');
    }
  }

  Future<void> getServiceRateFromAPI() async {
    try {
      final rateData = await HomeService.getServiceRate();
      if (rateData != null) {
        rateExchange.value = rateData;
      } else {
        _setErrorRate('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏ó');
      }
    } catch (e) {
      log('‚ùå Error in searchItems: $e');
      _setErrorRate('$e');
    }
  }

  Future<void> getServiceFeeFromAPI() async {
    try {
      final feeData = await HomeService.getServiceFee();
      if (feeData != null) {
        transferFee.value = feeData;
      } else {
        _setErrorRate('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏ó');
      }
    } catch (e) {
      log('‚ùå Error in searchItems: $e');
      _setErrorRate('$e');
    }
  }

  Future<void> getAlipayPaymentFromAPI() async {
    try {
      final paymentData = await HomeService.getAlipayPayment();
      if (paymentData != null) {
        alipayPayment.value = paymentData;
      } else {
        _setErrorRate('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (e) {
      log('‚ùå Error in searchItems: $e');
      _setErrorRate('$e');
    }
  }

  Future<void> getImgBannerFromAPI() async {
    try {
      final imgData = await HomeService.getImgBanner();
      if (imgData != null && imgData is List<ImgBanner>) {
        imgBanners.value = imgData;
      } else {
        _setErrorRate('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (e) {
      log('‚ùå Error in searchItems: $e');
      _setErrorRate('$e');
    }
  }

  // Method to fetch user data and populate shipping addresses
  Future<void> getUserDataAndShippingAddresses() async {
    try {
      // ‡πÄ‡∏ä‡πá‡∏Ñ userID ‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API
      final prefs = await SharedPreferences.getInstance();
      final userID = prefs.getInt('userID');

      if (userID != null) {
        final userData = await HomeService.getUserById();

        // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• user
        currentUser.value = userData;

        // ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ shipping addresses
        if (userData.ship_address != null && userData.ship_address!.isNotEmpty) {
          ship_address = userData.ship_address!;
          // Set first address as default selection
          select_ship_address = ship_address.first;
        } else {
          ship_address = [];
          select_ship_address = null;
        }

        // ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï UI
        update();
      } else {
        log('‚ö†Ô∏è No userID found, skipping getUserById API call');
        currentUser.value = null;
        ship_address = [];
        select_ship_address = null;
      }
    } catch (e) {
      log('‚ùå Error fetching user data: $e');
      currentUser.value = null;
      ship_address = [];
      select_ship_address = null;
    }
  }

  Future<void> getAlipayPaymentById(int id) async {
    try {
      final paymentData = await HomeService.getAlipayPaymentById(id: id);
      if (paymentData != null) {
        alipayPaymentById.value = paymentData;
      } else {
        _setErrorRate('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (e) {
      log('‚ùå Error in searchItems: $e');
      _setErrorRate('$e');
    }
  }

  // Method to fetch reward
  Future<void> getRewardFromAPI() async {
    try {
      final rewardData = await HomeService.getReward();
      if (rewardData != null) {
        reward.value = rewardData;
      } else {
        _setErrorRate('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•');
      }
    } catch (e) {
      log('‚ùå Error in searchItems: $e');
      _setErrorRate('$e');
    }
  }

  // Method to fetch reward exchange history
  Future<void> getRewardExchangeFromAPI() async {
    try {
      isLoadingRewardHistory.value = true;
      final exchangeData = await HomeService.getRewardExchange();
      if (exchangeData != null) {
        rewardExchangeHistory.value = exchangeData;
      } else {
        _setErrorRate('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ API ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏Å');
      }
    } catch (e) {
      log('‚ùå Error in getRewardExchange: $e');
      _setErrorRate('$e');
    } finally {
      isLoadingRewardHistory.value = false;
    }
  }

  // Method to update reward status (redeem reward)
  Future<bool> updateRewardStatus({required int id, required String status}) async {
    try {
      final result = await HomeService.updateStatusReward(id: id, status: status);
      return true;
    } catch (e) {
      log('‚ùå Error in updateRewardStatus: $e');
      return false;
    }
  }

  // Method to get user by ID
  Future<User?> getUserByIdFromAPI() async {
    try {
      final user = await HomeService.getUserById();
      return user;
    } catch (e) {
      log('‚ùå Error in getUserById: $e');
      return null;
    }
  }

  // Method to update selected shipping address
  void updateSelectedShippingAddress(Shipping address) {
    select_ship_address = address;
  }

  // Method to fetch extra services
  Future<void> getExtraServicesFromAPI() async {
    try {
      final services = await HomeService.getExtraService();
      extraServices.value = services;
    } catch (e) {
      log('‚ùå Error fetching extra services: $e');
      extraServices.clear();
    }
  }

  Future<void> getRateShipFromAPI() async {
    try {
      final rates = await HomeService.getRateShip();
      rateShip.value = rates;
    } catch (e) {
      log('‚ùå Error fetching rate ship: $e');
      rateShip.clear();
    }
  }
}
