import 'dart:developer';

import 'package:gcargo/models/faq.dart';
import 'package:gcargo/models/manual.dart';
import 'package:gcargo/models/tegaboutus.dart';
import 'package:gcargo/models/user.dart';
import 'package:gcargo/models/wallettrans.dart';
import 'package:gcargo/services/accountService.dart';
import 'package:get/get.dart';

class AccountController extends GetxController {
  // Observable variables
  var isLoading = false.obs;
  var errorMessage = ''.obs;
  var hasError = false.obs;
  var faqs = <Faq>[].obs;
  var manuals = <Manual>[].obs;
  var news = <Manual>[].obs;
  var aboutUs = Rxn<Tegaboutus>();
  var walletTrans = Rxn<WalletTrans>().obs;
  var listWalletTrans = <WalletTrans>[].obs;
  var coupons = <Map<String, dynamic>>[].obs;
  var user = Rxn<User>();

  @override
  void onInit() {
    super.onInit();
    log('üöÄ AccountController onInit called');
  }

  Future<void> getFaqs() async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final data = await AccountService.getFaqs();

      if (data != null) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö FAQ ‡∏ô‡∏µ‡πâ
        faqs.value = data;
        log('FAQs: $faqs');
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• FAQ ‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      log('‚ùå Error in getFaqs: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• FAQ ‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> getManuals() async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final data = await AccountService.getManuals();

      if (data != null) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        manuals.value = data;
        log('Manuals: $manuals');
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manual ‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      log('‚ùå Error in getManuals: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Manual ‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> getNews() async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final data = await AccountService.getNews();

      if (data != null) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        news.value = data;
        log('News: $news');
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• News ‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      log('‚ùå Error in getNews: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• News ‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> getTegAboutUs() async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final data = await AccountService.getTegAboutUs();

      if (data != null) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        aboutUs.value = data;
        log('About Us: $aboutUs');
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• About Us ‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      log('‚ùå Error in getTegAboutUs: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• About Us ‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  Future<void> getListWalletTrans() async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final data = await AccountService.getListWalletTrans();

      if (data != null) {
        // ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏≠‡∏∞‡πÑ‡∏£
        listWalletTrans.value = data;
        log('List Wallet Trans: $listWalletTrans');
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wallet Trans ‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      log('‚ùå Error in getListWalletTrans: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Wallet Trans ‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á
  Future<void> getCoupons() async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final data = await AccountService.getCoupons();

      if (data != null) {
        coupons.value = data;
        log('Coupons: $coupons');
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      log('‚ùå Error in getCoupons: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏π‡∏õ‡∏≠‡∏á‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  //‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏π‡∏™‡πÄ‡∏ã‡∏≠‡∏£‡πå‡∏ï‡∏≤‡∏°‡πÑ‡∏≠‡∏î‡∏µ
  Future<void> getUserById() async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final data = await AccountService.getUserById();

      if (data != null) {
        user.value = data;
        log('User: $user');
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      log('‚ùå Error in getUserById: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• User ‡πÑ‡∏î‡πâ');
    } finally {
      isLoading.value = false;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  Future<void> addAddress(Map<String, dynamic> addressData) async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final result = await AccountService.addAddress(
        contact_name: addressData['contact_name'] ?? '',
        contact_phone: addressData['contact_phone'] ?? '',
        address: addressData['address'] ?? '',
        sub_district: addressData['sub_district'] ?? '',
        district: addressData['district'] ?? '',
        province: addressData['province'] ?? '',
        postal_code: addressData['postal_code'] ?? '',
        latitude: addressData['latitude'] ?? 0.0,
        longitude: addressData['longitude'] ?? 0.0,
      );

      if (result != null) {
        log('Address added successfully');
        // Refresh user data
        await getUserById();
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      log('‚ùå Error in addAddress: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ');
      rethrow;
    } finally {
      isLoading.value = false;
    }
  }

  // ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡πà‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà
  Future<void> editAddress(int id, Map<String, dynamic> addressData) async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final result = await AccountService.editAddress(
        id: id,
        contact_name: addressData['contact_name'] ?? '',
        contact_phone: addressData['contact_phone'] ?? '',
        address: addressData['address'] ?? '',
        sub_district: addressData['sub_district'] ?? '',
        district: addressData['district'] ?? '',
        province: addressData['province'] ?? '',
        postal_code: addressData['postal_code'] ?? '',
        latitude: addressData['latitude'] ?? 0.0,
        longitude: addressData['longitude'] ?? 0.0,
      );

      if (result != null) {
        log('Address updated successfully');
        // Refresh user data
        await getUserById();
      } else {
        _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ');
      }
    } catch (e) {
      log('‚ùå Error in editAddress: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ');
      rethrow;
    } finally {
      isLoading.value = false;
    }
  }

  void _setError(String message) {
    hasError.value = true;
    errorMessage.value = message;
  }

  // Method refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Future<void> refreshData() async {
    await getFaqs();
    await getManuals();
    await getNews();
    await getCoupons();
  }
}
