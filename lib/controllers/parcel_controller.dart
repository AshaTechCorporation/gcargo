import 'dart:developer';
import 'package:flutter/scheduler.dart';
import 'package:get/get.dart';
import 'package:gcargo/models/legalimport.dart';
import 'package:gcargo/services/parcelService.dart';

class ParcelController extends GetxController {
  // Observable variables
  var isLoading = false.obs;
  var deliveryOrders = <LegalImport>[].obs;
  var errorMessage = ''.obs;
  var hasError = false.obs;

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Tab Controller
  var selectedTabIndex = 0.obs;

  // ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° status
  var arrivedChinaOrders = <LegalImport>[].obs;
  var inTransitOrders = <LegalImport>[].obs;
  var arrivedThailandOrders = <LegalImport>[].obs;
  var awaitingPaymentOrders = <LegalImport>[].obs;
  var deliveredOrders = <LegalImport>[].obs;

  @override
  void onInit() {
    super.onInit();
    log('üöÄ ParcelController onInit called');
    // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å API ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å build ‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á setState during build error
    SchedulerBinding.instance.addPostFrameCallback((_) {
      getDeliveryOrders();
    });
  }

  Future<void> getDeliveryOrders() async {
    try {
      isLoading.value = true;
      hasError.value = false;
      errorMessage.value = '';

      final data = await ParcelService.getDeliveryOrders();

      if (data.isNotEmpty) {
        deliveryOrders.value = data;
        _categorizeOrdersByStatus(data);
      } else {
        deliveryOrders.clear();
        _clearAllCategories();
      }
    } catch (e) {
      log('‚ùå Error in getDeliveryOrders: $e');
      _setError('‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏±‡∏™‡∏î‡∏∏‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á');
    } finally {
      isLoading.value = false;
    }
  }

  void _categorizeOrdersByStatus(List<LegalImport> orders) {
    // ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
    _clearAllCategories();

    // ‡πÅ‡∏¢‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° status
    for (var order in orders) {
      switch (order.status) {
        case 'arrived_china_warehouse':
          arrivedChinaOrders.add(order);
          break;
        case 'in_transit':
          inTransitOrders.add(order);
          break;
        case 'arrived_thailand_warehouse':
          arrivedThailandOrders.add(order);
          break;
        case 'awaiting_payment':
          awaitingPaymentOrders.add(order);
          break;
        case 'delivered':
          deliveredOrders.add(order);
          break;
        default:
          log('Unknown status: ${order.status}');
      }
    }
  }

  void _clearAllCategories() {
    arrivedChinaOrders.clear();
    inTransitOrders.clear();
    arrivedThailandOrders.clear();
    awaitingPaymentOrders.clear();
    deliveredOrders.clear();
  }

  void _setError(String message) {
    hasError.value = true;
    errorMessage.value = message;
    deliveryOrders.clear();
    _clearAllCategories();
  }

  // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö refresh ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
  Future<void> refreshData() async {
    await getDeliveryOrders();
  }

  // Method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô tab
  void changeTab(int index) {
    selectedTabIndex.value = index;
  }

  // Helper methods ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏≤‡∏° tab ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
  List<LegalImport> get currentTabOrders {
    switch (selectedTabIndex.value) {
      case 0:
        return deliveryOrders; // ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
      case 1:
        return arrivedChinaOrders + inTransitOrders; // ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á (‡∏£‡∏ß‡∏° arrived_china_warehouse + in_transit)
      case 2:
        return arrivedThailandOrders +
            awaitingPaymentOrders +
            deliveredOrders; // ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô (‡∏£‡∏ß‡∏° arrived_thailand_warehouse + awaiting_payment + delivered)
      default:
        return deliveryOrders;
    }
  }

  // Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏õ‡∏•‡∏á status ‡πÄ‡∏õ‡πá‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢
  String getStatusText(String? status) {
    switch (status) {
      case 'arrived_china_warehouse':
        return '‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡∏à‡∏µ‡∏ô';
      case 'in_transit':
        return '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ç‡∏ô‡∏™‡πà‡∏á';
      case 'arrived_thailand_warehouse':
        return '‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏•‡∏±‡∏á‡πÑ‡∏ó‡∏¢';
      case 'awaiting_payment':
        return '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô';
      case 'delivered':
        return '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß';
      default:
        return status ?? '‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞';
    }
  }

  // Helper method ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏µ‡∏Ç‡∏≠‡∏á status
  String getStatusColor(String? status) {
    switch (status) {
      case 'arrived_china_warehouse':
        return 'blue';
      case 'in_transit':
        return 'orange';
      case 'arrived_thailand_warehouse':
        return 'green';
      case 'awaiting_payment':
        return 'red';
      case 'delivered':
        return 'green';
      default:
        return 'grey';
    }
  }
}
