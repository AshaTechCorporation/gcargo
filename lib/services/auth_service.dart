import 'package:shared_preferences/shared_preferences.dart';
import 'package:gcargo/services/biometric_service.dart';

enum AuthMethod { none, pin, faceId, fingerprint }

class AuthService {
  static const String _pinKey = 'user_pin';
  static const String _pinEnabledKey = 'security_pin_enabled';
  static const String _faceIdEnabledKey = 'security_faceid_enabled';
  static const String _fingerprintEnabledKey = 'security_fingerprint_enabled';
  static const String _lastAuthTimeKey = 'last_auth_time';
  static const String _appStateKey = 'app_state';

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£ authentication ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static Future<bool> shouldRequireAuth() async {
    try {
      final prefs = await SharedPreferences.getInstance();

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô authentication ‡πÉ‡∏î‡πÜ ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final isPinEnabled = prefs.getBool(_pinEnabledKey) ?? false;
      final isFaceIdEnabled = prefs.getBool(_faceIdEnabledKey) ?? false;
      final isFingerprintEnabled = prefs.getBool(_fingerprintEnabledKey) ?? false;

      print('üîê Auth Check - PIN enabled: $isPinEnabled, FaceID: $isFaceIdEnabled, Fingerprint: $isFingerprintEnabled');

      final hasAnyAuthEnabled = isPinEnabled || isFaceIdEnabled || isFingerprintEnabled;
      if (!hasAnyAuthEnabled) {
        print('üîê No auth enabled, skipping auth');
        return false;
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ PIN ‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà (‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ PIN)
      if (isPinEnabled) {
        final hasPin = prefs.getString(_pinKey) != null;
        print('üîê PIN check - has PIN set: $hasPin');
        if (!hasPin) {
          print('üîê PIN enabled but not set, skipping auth');
          return false;
        }
      }

      // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÅ‡∏≠‡∏õ‡∏ñ‡∏π‡∏Å‡∏õ‡∏¥‡∏î‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      final appState = prefs.getString(_appStateKey) ?? 'closed';
      final lastAuthTime = prefs.getInt(_lastAuthTimeKey) ?? 0;
      final currentTime = DateTime.now().millisecondsSinceEpoch;
      final timeDiff = currentTime - lastAuthTime;

      print('üîê App state: $appState, time diff: ${timeDiff}ms');

      // ‡∏ñ‡πâ‡∏≤‡πÅ‡∏≠‡∏õ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô background ‡πÄ‡∏Å‡∏¥‡∏ô 30 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ ‡πÉ‡∏´‡πâ‡∏ï‡πâ‡∏≠‡∏á auth ‡πÉ‡∏´‡∏°‡πà
      if (appState == 'background' && timeDiff > 30000) {
        print('üîê App was in background too long, requiring auth');
        return true;
      }

      // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏¥‡∏î‡πÅ‡∏≠‡∏õ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å
      if (appState == 'closed') {
        print('üîê App was closed, requiring auth');
        return true;
      }

      print('üîê No auth required');
      return false;
    } catch (e) {
      print('Error checking auth requirement: $e');
      return false;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ biometric ‡∏´‡∏£‡∏∑‡∏≠ PIN
  static Future<AuthMethod> getPreferredAuthMethod() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final isFaceIdEnabled = prefs.getBool(_faceIdEnabledKey) ?? false;
      final isFingerprintEnabled = prefs.getBool(_fingerprintEnabledKey) ?? false;
      final isPinEnabled = prefs.getBool(_pinEnabledKey) ?? false;

      // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç: Face ID > Fingerprint > PIN
      if (isFaceIdEnabled && await BiometricService.hasFaceID()) {
        return AuthMethod.faceId;
      } else if (isFingerprintEnabled && await BiometricService.hasFingerprint()) {
        return AuthMethod.fingerprint;
      } else if (isPinEnabled && await hasPinSet()) {
        return AuthMethod.pin;
      }

      return AuthMethod.none;
    } catch (e) {
      print('Error getting preferred auth method: $e');
      return AuthMethod.pin;
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà auth ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  static Future<void> markAuthSuccess() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setInt(_lastAuthTimeKey, DateTime.now().millisecondsSinceEpoch);
      await prefs.setString(_appStateKey, 'active');
    } catch (e) {
      print('Error marking auth success: $e');
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡πá‡∏ô active
  static Future<void> markAppActive() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_appStateKey, 'active');
      print('üîÑ AuthService: App marked as active');
    } catch (e) {
      print('Error marking app active: $e');
    }
  }

  // ‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• SharedPreferences ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö)
  static Future<void> clearAllData() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      print('üîÑ AuthService: Before clear - keys: ${prefs.getKeys()}');
      await prefs.clear();
      print('üîÑ AuthService: After clear - keys: ${prefs.getKeys()}');
      print('üîÑ AuthService: All data cleared successfully');
    } catch (e) {
      print('Error clearing data: $e');
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡πá‡∏ô background
  static Future<void> markAppBackground() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_appStateKey, 'background');
      await prefs.setInt(_lastAuthTimeKey, DateTime.now().millisecondsSinceEpoch);
      print('üîÑ AuthService: App marked as background');
    } catch (e) {
      print('Error marking app background: $e');
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÅ‡∏≠‡∏õ‡πÄ‡∏õ‡πá‡∏ô closed
  static Future<void> markAppClosed() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_appStateKey, 'closed');
      print('üîÑ AuthService: App marked as closed');
    } catch (e) {
      print('Error marking app closed: $e');
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ PIN ‡∏ï‡∏±‡πâ‡∏á‡πÑ‡∏ß‡πâ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
  static Future<bool> hasPinSet() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return prefs.getString(_pinKey) != null;
    } catch (e) {
      print('Error checking PIN: $e');
      return false;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö PIN
  static Future<bool> verifyPin(String pin) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      final savedPin = prefs.getString(_pinKey);
      return savedPin == pin;
    } catch (e) {
      print('Error verifying PIN: $e');
      return false;
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å PIN
  static Future<bool> savePin(String pin) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.setString(_pinKey, pin);
      return true;
    } catch (e) {
      print('Error saving PIN: $e');
      return false;
    }
  }

  // ‡∏•‡∏ö PIN
  static Future<bool> removePin() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      await prefs.remove(_pinKey);
      return true;
    } catch (e) {
      print('Error removing PIN: $e');
      return false;
    }
  }

  // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  static Future<Map<String, bool>> getSecuritySettings() async {
    try {
      final prefs = await SharedPreferences.getInstance();
      return {
        'pin_enabled': prefs.getBool(_pinEnabledKey) ?? false,
        'faceid_enabled': prefs.getBool(_faceIdEnabledKey) ?? false,
        'fingerprint_enabled': prefs.getBool(_fingerprintEnabledKey) ?? false,
      };
    } catch (e) {
      print('Error getting security settings: $e');
      return {'pin_enabled': false, 'faceid_enabled': false, 'fingerprint_enabled': false};
    }
  }

  // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢
  static Future<bool> saveSecuritySetting(String key, bool value) async {
    try {
      final prefs = await SharedPreferences.getInstance();
      String prefKey;

      switch (key) {
        case 'pin':
          prefKey = _pinEnabledKey;
          break;
        case 'faceid':
          prefKey = _faceIdEnabledKey;
          break;
        case 'fingerprint':
          prefKey = _fingerprintEnabledKey;
          break;
        default:
          return false;
      }

      await prefs.setBool(prefKey, value);
      return true;
    } catch (e) {
      print('Error saving security setting: $e');
      return false;
    }
  }
}
