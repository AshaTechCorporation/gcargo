import 'package:flutter/material.dart';
import 'package:gcargo/parcel/exchangeDetailPage.dart';

class ExchangeStatusPage extends StatefulWidget {
  const ExchangeStatusPage({super.key});

  @override
  State<ExchangeStatusPage> createState() => _ExchangeStatusPageState();
}

class _ExchangeStatusPageState extends State<ExchangeStatusPage> {
  String selectedStatus = '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î';

  final List<String> statusList = ['‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î', '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô', '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£', '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å'];
  final TextEditingController _dateController = TextEditingController(text: '1/01/2024 - 01/07/2025');

  final List<Map<String, dynamic>> exchanges = [
    {
      'date': '02/07/2025',
      'method': '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£',
      'icon': 'assets/icons/bank_icon.png',
      'ref': '0000000000',
      'status': '‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£',
      'cny': '100',
      'thb': '500',
    },
    {
      'date': '02/07/2025',
      'method': 'Alipay',
      'icon': 'assets/icons/alipay_icon.png',
      'ref': '0000000000',
      'status': '‡∏£‡∏≠‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô',
      'cny': '150',
      'thb': '750',
    },
    {
      'date': '02/07/2025',
      'method': 'WeChat Pay',
      'icon': 'assets/icons/wechat_icon.png',
      'ref': '0000000000',
      'status': '‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à',
      'cny': '200',
      'thb': '1000',
    },
  ];

  @override
  Widget build(BuildContext context) {
    final grouped = <String, List<Map<String, dynamic>>>{};
    for (var item in exchanges) {
      if (selectedStatus != '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' && item['status'] != selectedStatus) continue;
      grouped.putIfAbsent(item['date'], () => []).add(item);
    }

    final Map<String, int> statusCounts = {
      for (var status in statusList) status: exchanges.where((e) => status == '‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î' || e['status'] == status).length,
    };

    return Scaffold(
      backgroundColor: const Color(0xFFF2F2F2),
      appBar: AppBar(
        backgroundColor: Colors.white,
        elevation: 0,
        leading: IconButton(icon: const Icon(Icons.arrow_back_ios_new, color: Colors.black), onPressed: () => Navigator.pop(context)),
        title: const Text('‡πÅ‡∏•‡∏Å‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏á‡∏¥‡∏ô‡∏ö‡∏≤‡∏ó‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏¢‡∏ß‡∏ô', style: TextStyle(color: Colors.black)),
      ),
      body: Column(
        children: [
          // üîπ ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö TextField
          Container(
            color: Colors.white,
            padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 12),
            child: TextFormField(
              controller: _dateController,
              readOnly: false,
              decoration: InputDecoration(
                prefixIcon: Padding(padding: const EdgeInsets.all(12.0), child: Image.asset('assets/icons/calendar_icon.png', width: 20)),
                hintText: '‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà',
                contentPadding: const EdgeInsets.symmetric(vertical: 0, horizontal: 12),
                filled: true,
                fillColor: Colors.white,
                border: OutlineInputBorder(borderRadius: BorderRadius.circular(6), borderSide: BorderSide(color: Colors.grey.shade300)),
                enabledBorder: OutlineInputBorder(borderRadius: BorderRadius.circular(6), borderSide: BorderSide(color: Colors.grey.shade300)),
              ),
              onTap: () {
                // TODO: picker date
              },
            ),
          ),

          // üîπ ‡πÅ‡∏ñ‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
          SizedBox(
            height: 52,
            child: ListView.separated(
              padding: const EdgeInsets.symmetric(horizontal: 16, vertical: 8),
              scrollDirection: Axis.horizontal,
              itemCount: statusList.length,
              separatorBuilder: (_, __) => const SizedBox(width: 8),
              itemBuilder: (_, i) {
                final status = statusList[i];
                final isSelected = status == selectedStatus;
                final count = statusCounts[status] ?? 0;

                return GestureDetector(
                  onTap: () => setState(() => selectedStatus = status),
                  child: Container(
                    padding: const EdgeInsets.symmetric(horizontal: 14, vertical: 8),
                    decoration: BoxDecoration(
                      color: isSelected ? const Color(0xFF246BFD) : Colors.white,
                      border: Border.all(color: const Color(0xFF246BFD)),
                      borderRadius: BorderRadius.circular(5), // ‡∏°‡∏∏‡∏°‡∏•‡∏î‡∏•‡∏á
                    ),
                    child: Row(
                      children: [
                        Text(status, style: TextStyle(color: isSelected ? Colors.white : const Color(0xFF246BFD), fontWeight: FontWeight.w500)),
                        const SizedBox(width: 6),
                        Container(
                          padding: const EdgeInsets.symmetric(horizontal: 6, vertical: 2),
                          decoration: BoxDecoration(
                            color: isSelected ? Colors.white : const Color(0xFFF5F5F5),
                            borderRadius: BorderRadius.circular(12),
                          ),
                          child: Text('$count', style: TextStyle(fontSize: 12, color: isSelected ? const Color(0xFF246BFD) : Colors.black)),
                        ),
                      ],
                    ),
                  ),
                );
              },
            ),
          ),

          // üîπ ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£
          Expanded(
            child: ListView(
              padding: const EdgeInsets.all(16),
              children:
                  grouped.entries.map((e) {
                    return Column(
                      crossAxisAlignment: CrossAxisAlignment.start,
                      children: [
                        Text(e.key, style: const TextStyle(fontWeight: FontWeight.bold)),
                        const SizedBox(height: 8),
                        ...e.value.map((item) => _buildCard(item)),
                        const SizedBox(height: 12),
                      ],
                    );
                  }).toList(),
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildCard(Map<String, dynamic> item) {
    return GestureDetector(
      onTap: () {
        if (item['method'] == '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£') {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder:
                  (_) => ExchangeDetailPage(
                    method: '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', // ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', 'WeChat Pay'
                    iconPath: 'assets/icons/bank_icon.png', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                    reference: '0000000000',
                    cny: '100',
                    thb: '500.00',
                  ),
            ),
          );
        } else if (item['method'] == 'Alipay') {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder:
                  (_) => ExchangeDetailPage(
                    method: 'Alipay', // ‡∏´‡∏£‡∏∑‡∏≠ '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£', 'WeChat Pay'
                    iconPath: 'assets/icons/alipay_icon.png', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                    reference: '0000000000',
                    cny: '100',
                    thb: '500.00',
                  ),
            ),
          );
        } else {
          Navigator.push(
            context,
            MaterialPageRoute(
              builder:
                  (_) => ExchangeDetailPage(
                    method: 'WeChat Pay', //
                    iconPath: 'assets/icons/wechat_icon.png', // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
                    reference: '0000000000',
                    cny: '100',
                    thb: '500.00',
                  ),
            ),
          );
        }
      },
      child: Container(
        margin: const EdgeInsets.only(bottom: 12),
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: Colors.white,
          borderRadius: BorderRadius.circular(12),
          boxShadow: [BoxShadow(color: Colors.black12, blurRadius: 4, offset: Offset(0, 1))],
        ),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // üîπ Row ‡∏ö‡∏ô‡∏™‡∏∏‡∏î ‡πÑ‡∏≠‡∏Ñ‡∏≠‡∏ô + ‡∏ä‡∏∑‡πà‡∏≠ + ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Row(
                  children: [
                    Container(
                      width: 36,
                      height: 36,
                      decoration: const BoxDecoration(shape: BoxShape.circle, color: Color(0xFFF1F1F1)),
                      child: Center(child: Image.asset(item['icon'], width: 20, height: 20)),
                    ),
                    const SizedBox(width: 8),
                    Text(item['method'], style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 16)),
                  ],
                ),
                Text(item['status'], style: const TextStyle(fontSize: 13, color: Colors.grey)),
              ],
            ),
            const SizedBox(height: 12),

            // üîπ Ref
            Text(item['method'] == '‡∏ö‡∏±‡∏ç‡∏ä‡∏µ‡∏ò‡∏ô‡∏≤‡∏Ñ‡∏≤‡∏£' ? '‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡∏ö‡∏±‡∏ç‡∏ä‡∏µ' : '‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå', style: const TextStyle(fontSize: 13, color: Colors.grey)),
            const SizedBox(height: 2),
            Text(item['ref'], style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 14)),

            const SizedBox(height: 12),

            // üîπ ‡πÅ‡∏ñ‡∏ß‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô
            Row(
              children: [
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text('‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏´‡∏¢‡∏ß‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÇ‡∏≠‡∏ô', style: TextStyle(fontSize: 13, color: Colors.grey)),
                      const SizedBox(height: 4),
                      Text('${item['cny']} ¬•', style: const TextStyle(fontWeight: FontWeight.bold, fontSize: 14)),
                    ],
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.end,
                    children: [
                      const Text('‡∏¢‡∏≠‡∏î‡πÄ‡∏á‡∏¥‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏ä‡∏≥‡∏£‡∏∞:', style: TextStyle(fontSize: 13, color: Colors.grey)),
                      const SizedBox(height: 4),
                      Text('${item['thb']} ‡∏ø', style: const TextStyle(color: Colors.red, fontWeight: FontWeight.bold, fontSize: 14)),
                    ],
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }
}
